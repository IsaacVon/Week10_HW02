{"version":3,"sources":["components/navbar.jsx","components/pages/home.jsx","components/pages/about.jsx","projects/projects.js","components/pages/portfolio.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","Navbar","bg","expand","Brand","className","href","Toggle","aria-controls","Collapse","id","Nav","Link","Component","Home","About","projects","_id","title","url","description","technology","challenges","accomplishments","getProjects","Portfolio","Fragment","this","map","project","key","Button","variant","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTA2BeA,E,4MAtBbC,MAAQ,G,uDAEN,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,UAAU,OAAOC,KAAK,KAApC,gCAGA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,qBAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKN,UAAU,WACb,kBAACM,EAAA,EAAIC,KAAL,CAAUN,KAAK,KAAf,QACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,UAAf,SACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,cAAf,qB,GAdOO,a,MCKNC,MANf,WACE,OACE,uBAAGT,UAAU,kBAAb,yGCGWU,MANf,WACE,OACI,uBAAGV,UAAU,kBAAb,uCCJAW,EAAW,CACb,CACEC,IAAK,IACLC,MAAO,qBACPC,IAAK,0DACLC,YAAa,mCACbC,WAAY,CAAE,MAAO,aAAc,UACnCC,WAAY,OACZC,gBAAiB,YAEnB,CACEN,IAAK,IACLC,MAAO,OACPC,IAAK,yCACLC,YAAa,oBACbC,WAAY,CAAE,MAAO,aAAc,UACnCC,WAAY,OACZC,gBAAiB,YAEnB,CACEN,IAAK,IACLC,MAAO,cACPC,IAAK,0DACLC,YAAa,2BACbC,WAAY,CAAE,MAAO,aAAc,UACnCC,WAAY,OACZC,gBAAiB,aAKhB,SAASC,IACd,OAAOR,E,YCYMS,E,4MAvCbzB,MAAQ,CACJgB,SAAUQ,K,uDAMZ,OACE,kBAAC,IAAME,SAAP,KAEE,2BAAOrB,UAAU,yBACf,+BACE,4BAEE,4CACA,2CACA,0CACA,0CACA,iDAGJ,+BACGsB,KAAK3B,MAAMgB,SAASY,KAAI,SAACC,GAAD,OACvB,wBAAIC,IAAKD,EAAQZ,KAEf,4BAAI,kBAACc,EAAA,EAAD,CAAQzB,KAAMuB,EAAQV,IAAKa,QAAQ,QAAQH,EAAQX,QACvD,4BAAKW,EAAQT,aACb,4BAAKS,EAAQR,YACb,4BAAKQ,EAAQP,YACb,4BAAKO,EAAQN,4B,GA9BLV,aCkBToB,MAbf,WACE,OACE,kBAAC,IAAD,KACE,oCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWrB,IAC3B,kBAAC,IAAD,CAAOoB,KAAK,SAASC,UAAWpB,IAChC,kBAAC,IAAD,CAAOmB,KAAK,aAAaC,UAAWV,OCJxBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c1f9b1e2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\nimport { Nav } from \"react-bootstrap\";\n\nclass NavBar extends Component {\n  state = {};\n  render() {\n    return (\n      <>\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand className=\"ml-3\" href=\"/\">\n            portfolio. Isaac Householder\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/\">Home</Nav.Link>\n              <Nav.Link href=\"/about\">About</Nav.Link>\n              <Nav.Link href=\"/portfolio\">Portfolio</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\n\n\nfunction Home() {\n  return (\n    <p className=\"m-3 text-muted\">Hi, This is a minimal website built on react that has some information about me and my web projects.</p>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\n\nfunction About() {\n  return (\n      <p className=\"m-3 text-muted\">About me, im learning programming.</p>\n  );\n}\n\nexport default About;","const projects = [\n    {\n      _id: \"1\",\n      title: \"Urban Homesteading\",\n      url: \"https://isaacvon.github.io/Project1-UrbanHomesteading-/\",\n      description: \"description: Urban Homesteading \",\n      technology: [ \"api\", \"javascript\", \"github\" ],\n      challenges: \"None\",\n      accomplishments: \"it works\",\n    },    \n    {\n      _id: \"2\",\n      title: \"Josh\",\n      url: \"https://github.com/GitNAG0/GP3project2\",\n      description: \"description: Josh\",\n      technology: [ \"api\", \"javascript\", \"github\" ],\n      challenges: \"None\",\n      accomplishments: \"it works\",\n    },\n    {\n      _id: \"3\",\n      title: \"Tic Tac Toe\",\n      url: \"https://isaacvon.github.io/Project1-UrbanHomesteading-/\",\n      description: \"discription: Tic Tac Toe\",\n      technology: [ \"api\", \"javascript\", \"github\" ],\n      challenges: \"None\",\n      accomplishments: \"it works\",\n    },\n]\n\n\nexport function getProjects() {\n  return projects;\n}\n","import React, { Component } from \"react\";\nimport { getProjects } from \"../../projects/projects\";\nimport { Button } from 'react-bootstrap';\n\nclass Portfolio extends Component {\n  state = {\n      projects: getProjects()\n  };\n\n  render() {\n\n\n    return (\n      <React.Fragment>\n        \n        <table className=\"table ml-3 text-muted\">\n          <thead>\n            <tr>\n  \n              <th>Title + Link</th>\n              <th>Description</th>\n              <th>Technology</th>\n              <th>Challenges</th>\n              <th>Accomplishments</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.projects.map((project) => (\n              <tr key={project._id}>\n     \n                <td><Button href={project.url} variant=\"link\">{project.title}</Button></td>\n                <td>{project.description}</td>\n                <td>{project.technology}</td>\n                <td>{project.challenges}</td>\n                <td>{project.accomplishments}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Portfolio;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Home from \"./components/pages/home\";\nimport About from \"./components/pages/about\";\nimport Portfolio from \"./components/pages/portfolio\";\n\nfunction App() {\n  return (\n    <Router>\n      <>\n        <NavBar />\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/portfolio\" component={Portfolio} />\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}